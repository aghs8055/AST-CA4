/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 05 07:36:38 GMT 2024
 */

package ir.ramtung.impl1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ir.ramtung.impl1.Member;
import ir.ramtung.impl1.Professor;
import ir.ramtung.impl1.Student;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Member_ESTest extends Member_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Student student0 = new Student("ir.ramtung.impl1.Student", "Uru7CnmeH");
      Professor professor0 = new Professor("ir.ramtung.impl1.Student");
      boolean boolean0 = professor0.sameAs(student0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Professor professor0 = new Professor("W9zG(2K]ZD/S");
      boolean boolean0 = professor0.isNamed("W9zG(2K]ZD/S");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Professor professor0 = new Professor("W9zG(2K]ZD/S");
      boolean boolean0 = professor0.isNamed("}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Student student0 = new Student("ir.ramtung.impl1.InvalidArgumentEx", "ir.ramtung.impl1.InvalidArgumentEx");
      student0.penalize(2481);
      int int0 = student0.getPrevPenalty();
      assertEquals(2481, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Student student0 = new Student("W9zG(2K]ZD/S", "W9zG(2K]ZD/S");
      student0.penalize((-3527));
      int int0 = student0.getPrevPenalty();
      assertEquals((-3527), int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Student student0 = new Student("ir.ramtung.impl1.InvalidArgumentEx", "ir.ramtung.impl1.InvalidArgumentEx");
      // Undeclared exception!
      try { 
        student0.sameAs((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ir.ramtung.impl1.Member", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Student student0 = null;
      try {
        student0 = new Student("", "");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Empty member name not allowed
         //
         verifyException("ir.ramtung.impl1.Member", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Student student0 = new Student("W9zG(2K]ZD/S", "W9zG(2K]ZD/S");
      int int0 = student0.getPrevPenalty();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Professor professor0 = new Professor("Empty student ID is not allowed");
      boolean boolean0 = professor0.sameAs(professor0);
      assertTrue(boolean0);
  }
}
