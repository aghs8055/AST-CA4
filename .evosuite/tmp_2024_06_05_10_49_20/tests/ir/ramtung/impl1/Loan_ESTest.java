/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 05 07:30:48 GMT 2024
 */

package ir.ramtung.impl1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ir.ramtung.impl1.Book;
import ir.ramtung.impl1.Document;
import ir.ramtung.impl1.Loan;
import ir.ramtung.impl1.Member;
import ir.ramtung.impl1.Professor;
import ir.ramtung.impl1.Reference;
import ir.ramtung.impl1.Student;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Loan_ESTest extends Loan_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Student student0 = new Student(".<]O6t[/o,5", "Fs1B7Xi8Q+T@]");
      Book book0 = new Book("Fs1B7Xi8Q+T@]");
      Loan loan0 = new Loan(student0, book0, (-3510));
      int int0 = loan0.getPenalty((-3500));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Student student0 = new Student("Magazine with zero or negative number", "Magazine with zero or negative number");
      Book book0 = new Book("Magazine with zero or negative number");
      Loan loan0 = new Loan(student0, book0, 0);
      loan0.return_(10);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Student student0 = new Student("Zq.L7Oy9:{lT", "gX(T\"r@}Xel");
      Book book0 = new Book("Zq.L7Oy9:{lT");
      Loan loan0 = new Loan(student0, book0, 272);
      int int0 = loan0.getPenalty(909);
      assertEquals(3086000, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Reference reference0 = new Reference("8vLj?:fX^BKXSzhC");
      Professor professor0 = new Professor((String) null);
      Loan loan0 = new Loan(professor0, reference0, 1164);
      int int0 = loan0.getPenalty(377082520);
      assertEquals((-83950944), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Professor professor0 = new Professor("!pmB:");
      Book book0 = new Book("ir.ramtung.impl1.Professor");
      Loan loan0 = new Loan(professor0, book0, 0);
      int int0 = loan0.getPenalty(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Student student0 = new Student("eFjrU%OK1TZ", "eFjrU%OK1TZ");
      Reference reference0 = new Reference("eFjrU%OK1TZ");
      Loan loan0 = new Loan(student0, reference0, (-78));
      loan0.return_((-50));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Professor professor0 = new Professor("!pmB:");
      Book book0 = new Book("ir.ramtung.impl1.Professor");
      Loan loan0 = new Loan(professor0, book0, 0);
      loan0.return_(0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Student student0 = new Student("eFjrU%OK1TZ", "eFjrU%OK1TZ");
      Reference reference0 = new Reference("eFjrU%OK1TZ");
      Loan loan0 = new Loan(student0, reference0, (-78));
      try { 
        loan0.extend((-50));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot extend a late loan
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Professor professor0 = new Professor(">GYsTt'Q/#^");
      Book book0 = new Book(">GYsTt'Q/#^");
      Loan loan0 = new Loan(professor0, book0, 14927);
      try { 
        loan0.extend(14927);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot extend on the same day borrowed
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Professor professor0 = new Professor("!pmB:");
      Book book0 = new Book("ir.ramtung.impl1.Professor");
      Loan loan0 = new Loan(professor0, book0, 0);
      loan0.extend(10);
      loan0.extend((-1));
      try { 
        loan0.extend((-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Already extended twice
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Professor professor0 = new Professor("!pmB:");
      Book book0 = new Book("ir.ramtung.impl1.Professor");
      Loan loan0 = new Loan(professor0, book0, 0);
      boolean boolean0 = loan0.isBy(professor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Student student0 = new Student("<bcDDZb,_>k", "<bcDDZb,_>k");
      Book book0 = new Book("<bcDDZb,_>k");
      Loan loan0 = new Loan(student0, book0, 1336);
      Professor professor0 = new Professor("<bcDDZb,_>k");
      boolean boolean0 = loan0.isBy(professor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Professor professor0 = new Professor("!pmB:");
      Book book0 = new Book("ir.ramtung.impl1.Professor");
      Loan loan0 = new Loan(professor0, book0, 0);
      boolean boolean0 = loan0.isFor(book0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Professor professor0 = new Professor("2e}x$i'2EuQ7*'bX3");
      Loan loan0 = null;
      try {
        loan0 = new Loan(professor0, (Document) null, 2888);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Invalid argument to loan constructor
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Professor professor0 = new Professor("!pmB:");
      Book book0 = new Book("ir.ramtung.impl1.Professor");
      Loan loan0 = new Loan(professor0, book0, 0);
      boolean boolean0 = loan0.isFor((Document) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Loan loan0 = null;
      try {
        loan0 = new Loan((Member) null, (Document) null, (-49));
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Invalid argument to loan constructor
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }
}
